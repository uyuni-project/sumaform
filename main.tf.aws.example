locals {
  region            = ...
  availability_zone = ...
  key_file          = ...
  key_name          = ...
}

provider "aws" {
  region     = local.region
  access_key = ...
  secret_key = ...
}

module "base" {
  source = "./modules/base"

  cc_username = ...
  cc_password = ...

  name_prefix = ... // if you use name_prefix, make sure to update the server_configuration for clients/minions below

  provider_settings = {
    availability_zone = local.availability_zone
    region            = local.region
    ssh_allowed_ips   = [...]
    key_name          = local.key_name
    key_file          = local.key_file
  }
}


#================= Configuration with Mirror ================
# uncomment the following lines if you want to reuse an data disk snapshot
//data "aws_ebs_snapshot" "data_disk_snapshot" {
//  most_recent = true
//
//  filter {
//    name   = "tag:Name"
//    values = ["mirror-data-volume-snapshot"]
//  }
//}

module "mirror" {
  source = "./modules/mirror"

  base_configuration = module.base.configuration

  volume_provider_settings = {
# uncomment the following line if you want to reuse an data disk snapshot
//    volume_snapshot_id = data.aws_ebs_snapshot.data_disk_snapshot.id
  }
}

locals{
  base_configuration = merge(module.base.configuration,
  {
    mirror = length(module.mirror.configuration["hostnames"]) > 0 ? module.mirror.configuration["hostnames"][0] : null
  })
}

// ================= END MIRROR =================


module "server" {
  source             = "./modules/server"
  base_configuration = local.base_configuration

  name            = "server"
  image           = "opensuse153o"
  product_version = "uyuni-release"

  provider_settings = {  }
}

module "minion" {
  source             = "./modules/minion"
  base_configuration = local.base_configuration

  name                 = "minion"
  image                = "opensuse153o"
  server_configuration = module.server.configuration
  product_version      = "uyuni-release"
}

output "key_file" {
  value = local.key_file
}

output "bastion_public_name" {
  value = lookup(module.base.configuration, "bastion_host", null)
}

output "aws_server_private_name" {
  value = module.server.configuration.hostname
}

output "aws_minion_private_names" {
  value = module.minion.configuration.hostnames
}
